from aiogram import types, Router
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from bot.keyboards import minecraft_menu, yes_no_menu, main_menu, how_do_you_know_us, deadline
from bot.states import OrderState
from bot.loader import bot
from bot.config import GROUP_ID
from aiogram.filters import Command

router = Router()

order_build_steps = {
    'name': {"question": "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Å–∏—é –ø—Ä–æ–µ–∫—Ç–∞", "next_state": OrderState.waiting_for_version},
    'version': {"question": "–£–∫–∞–∂–∏—Ç–µ —Å–æ—Ü.—Å–µ—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞", "next_state": OrderState.waiting_for_socials},
    'socials': {"question": "–¶–≤–µ—Ç–æ–≤–∞—è –≥–∞–º–º–∞ –í–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞", "next_state": OrderState.waiting_for_colors},
    'colors': {"question": "–¢–∏–ø —Ä–µ–∂–∏–º–∞ (–ê–Ω–∞—Ä—Ö–∏—è, –ë–µ–¥–í–∞—Ä—Å –∏ —Ç.–¥)", "next_state": OrderState.waiting_for_mode},
    'mode': {"question": "–û–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –í–∞—à–µ–≥–æ —Ä–µ–∂–∏–º–∞ (–≤ —á–µ–º –µ–≥–æ —Å–º—ã—Å–ª, –∏ –∫–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å)",
             "next_state": OrderState.waiting_for_functionality},
    'functionality': {"question": "–ù—É–∂–µ–Ω –ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å–ø–∞–≤–Ω?", "next_state": OrderState.waiting_for_spawn, "keyboard": yes_no_menu},
    'spawn': {"question": "–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ –≥–æ–ª–æ–≥—Ä–∞–º–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", "next_state": OrderState.waiting_for_holograms},
    'holograms': {"question": "–ï—Å—Ç—å –ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –≤ —Å–∞–º–æ–ø–∏—Å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏—è—Ö (–ø–ª–∞–≥–∏–Ω–∞—Ö)?", "next_state": OrderState.waiting_for_plugins, "keyboard": yes_no_menu},
    'plugins': {"question": "–£–∫–∞–∂–∏—Ç–µ, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–∞–º–æ–ø–∏—Å–Ω—ã–π –ª–∞—É–Ω—á–µ—Ä –ø–æ–¥ –í–∞—à –ø—Ä–æ–µ–∫—Ç", "next_state": OrderState.waiting_for_launcher, "keyboard": yes_no_menu},
    'launcher': {"question": "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∫–æ–Ω–∫—É –¥–ª—è –í–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ (—Å—Å—ã–ª–∫–æ–π)", "next_state": OrderState.waiting_for_icon},
    'icon': {"question": "–ù—É–∂–µ–Ω –ª–∏ –í–∞–º —Å–∞–π—Ç –∞–≤—Ç–æ-–¥–æ–Ω–∞—Ç–∞ (EasyDonate)?", "next_state": OrderState.waiting_for_donations, "keyboard": yes_no_menu},
    'donations': {"question": "–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ, —á—Ç–æ –±—ã–ª–æ —É–ø—É—â–µ–Ω–æ –≤ –Ω–∞—à–µ–π —Ñ–æ—Ä–º–µ –Ω–∞ –í–∞—à –≤–∑–≥–ª—è–¥",
                  "next_state": OrderState.waiting_for_additional},
    'additional': {"question": "–ï—Å—Ç—å –ª–∏ —É –í–∞—Å –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –ø–æ–≤–æ–¥—É —Å—Ä–æ–∫–æ–≤?", "next_state": OrderState.waiting_for_deadline, "keyboard": deadline},
    'deadline': {"question": "–ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –í–∞–º –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –Ω–∞—à–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞?", "next_state": OrderState.waiting_for_support, "keyboard": yes_no_menu},
    'support': {"question": "–û—Ç–∫—É–¥–∞ –í—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏?", "next_state": OrderState.waiting_for_source, "keyboard": how_do_you_know_us},
    'source': {"question": None, "next_state": None}
}

async def process_order_build_step(message: types.Message, state: FSMContext, field: str):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ
    if message.text.lower() == "/cancel":
        await state.clear()
        await message.answer("üö´ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
        return

    await state.update_data({field: message.text})

    step_info = order_build_steps[field]
    if step_info["question"]:
        text = step_info["question"]

        if field == "name":
            text += "\n\n‚ùó –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚Äî –≤–≤–µ–¥–∏—Ç–µ /cancel"

        await message.answer(text, reply_markup=step_info.get("keyboard", ReplyKeyboardRemove()))

    if step_info["next_state"]:
        await state.set_state(step_info["next_state"])
    else:
        await complete_build_order(message, state)

async def complete_build_order(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await bot.send_message(
        GROUP_ID,
        f"üì¢ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ —Å–±–æ—Ä–∫—É!\n\n"
        f"üîπ –ù–∞–∑–≤–∞–Ω–∏–µ:\n ‚Äî {user_data['name']}\n"
        f"üîπ –í–µ—Ä—Å–∏—è:\n ‚Äî {user_data['version']}\n"
        f"üîπ –°–æ—Ü.—Å–µ—Ç–∏:\n ‚Äî {user_data['socials']}\n"
        f"üîπ –¶–≤–µ—Ç–æ–≤–∞—è –≥–∞–º–º–∞:\n ‚Äî {user_data['colors']}\n"
        f"üîπ –¢–∏–ø —Ä–µ–∂–∏–º–∞:\n ‚Äî {user_data['mode']}\n"
        f"üîπ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:\n ‚Äî {user_data['functionality']}\n"
        f"üîπ –ö–∞—Å—Ç–æ–º–Ω—ã–π —Å–ø–∞–≤–Ω:\n ‚Äî {user_data['spawn']}\n"
        f"üîπ –ì–æ–ª–æ–≥—Ä–∞–º–º—ã:\n ‚Äî {user_data['holograms']}\n"
        f"üîπ –ü–ª–∞–≥–∏–Ω—ã:\n ‚Äî {user_data['plugins']}\n"
        f"üîπ –õ–∞—É–Ω—á–µ—Ä:\n ‚Äî {user_data['launcher']}\n"
        f"üîπ –ò–∫–æ–Ω–∫–∞:\n ‚Äî {user_data['icon']}\n"
        f"üîπ –°–∞–π—Ç –∞–≤—Ç–æ-–¥–æ–Ω–∞—Ç–∞:\n ‚Äî {user_data['donations']}\n"
        f"üîπ –î–æ–ø. –æ–ø–∏—Å–∞–Ω–∏–µ:\n ‚Äî {user_data['additional']}\n"
        f"üîπ –°—Ä–æ–∫–∏:\n ‚Äî {user_data['deadline']}\n"
        f"üîπ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:\n ‚Äî {user_data['support']}\n"
        f"üîπ –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏:\n ‚Äî {user_data['source']}\n\n"
        f"–ó–∞–∫–∞–∑—á–∏–∫: {message.from_user.full_name} (@{message.from_user.username or '–ë–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞'})"
    )
    await message.answer("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —Å–±–æ—Ä–∫—É –ø—Ä–∏–Ω—è—Ç!", reply_markup=main_menu)
    await state.clear()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã
@router.message(Command("cancel"))
async def cancel_order_command(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üö´ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)


# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–≥–æ–≤ –∑–∞–∫–∞–∑–∞
@router.message(OrderState.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await process_order_build_step(message, state, 'name')


@router.message(OrderState.waiting_for_version)
async def process_version(message: types.Message, state: FSMContext):
    await process_order_build_step(message, state, 'version')


@router.message(OrderState.waiting_for_socials)
async def process_socials(message: types.Message, state: FSMContext):
    await process_order_build_step(message, state, 'socials')


@router.message(OrderState.waiting_for_colors)
async def process_colors(message: types.Message, state: FSMContext):
    await process_order_build_step(message, state, 'colors')


@router.message(OrderState.waiting_for_mode)
async def process_mode(message: types.Message, state: FSMContext):
    await process_order_build_step(message, state, 'mode')


@router.message(OrderState.waiting_for_functionality)
async def process_functionality(message: types.Message, state: FSMContext):
    await process_order_build_step(message, state, 'functionality')


@router.message(OrderState.waiting_for_spawn)
async def process_spawn(message: types.Message, state: FSMContext):
    await process_order_build_step(message, state, 'spawn')


@router.message(OrderState.waiting_for_holograms)
async def process_holograms(message: types.Message, state: FSMContext):
    await process_order_build_step(message, state, 'holograms')


@router.message(OrderState.waiting_for_plugins)
async def process_plugins(message: types.Message, state: FSMContext):
    await process_order_build_step(message, state, 'plugins')


@router.message(OrderState.waiting_for_launcher)
async def process_launcher(message: types.Message, state: FSMContext):
    await process_order_build_step(message, state, 'launcher')


@router.message(OrderState.waiting_for_icon)
async def process_icon(message: types.Message, state: FSMContext):
    await process_order_build_step(message, state, 'icon')


@router.message(OrderState.waiting_for_donations)
async def process_donations(message: types.Message, state: FSMContext):
    await process_order_build_step(message, state, 'donations')


@router.message(OrderState.waiting_for_additional)
async def process_additional(message: types.Message, state: FSMContext):
    await process_order_build_step(message, state, 'additional')


@router.message(OrderState.waiting_for_deadline)
async def process_deadline(message: types.Message, state: FSMContext):
    await process_order_build_step(message, state, 'deadline')


@router.message(OrderState.waiting_for_support)
async def process_support(message: types.Message, state: FSMContext):
    await process_order_build_step(message, state, 'support')


@router.message(OrderState.waiting_for_source)
async def process_source(message: types.Message, state: FSMContext):
    await process_order_build_step(message, state, 'source')
