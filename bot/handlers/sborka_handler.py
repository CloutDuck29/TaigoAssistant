# bot/order_handlers/build_handler.py

from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from bot.keyboards import minecraft_menu, yes_no_menu, main_menu
from bot.states import OrderState
from bot.loader import bot
from bot.config import GROUP_ID

router = Router()

@router.message(OrderState.waiting_for_category)
async def process_build_category(message: types.Message, state: FSMContext):
    category = message.text
    if category == "–°–±–æ—Ä–∫–∞":
        await message.answer("üìã –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:", reply_markup=types.ReplyKeyboardRemove())
        await state.update_data(category=category)
        await state.set_state(OrderState.waiting_for_name)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.", reply_markup=minecraft_menu)


@router.message(OrderState.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Å–∏—é –ø—Ä–æ–µ–∫—Ç–∞:")
    await state.set_state(OrderState.waiting_for_version)

@router.message(OrderState.waiting_for_version)
async def process_version(message: types.Message, state: FSMContext):
    await state.update_data(version=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å–æ—Ü.—Å–µ—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞:")
    await state.set_state(OrderState.waiting_for_socials)

@router.message(OrderState.waiting_for_socials)
async def process_socials(message: types.Message, state: FSMContext):
    await state.update_data(socials=message.text)
    await message.answer("–ù—É–∂–µ–Ω –ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å–ø–∞–≤–Ω?", reply_markup=yes_no_menu)
    await state.set_state(OrderState.waiting_for_spawn)

@router.message(OrderState.waiting_for_spawn)
async def process_spawn(message: types.Message, state: FSMContext):
    await state.update_data(spawn=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(OrderState.waiting_for_deadline)

@router.message(OrderState.waiting_for_deadline)
async def process_deadline(message: types.Message, state: FSMContext):
    await state.update_data(deadline=message.text)
    user_data = await state.get_data()

    if user_data["category"] == "–°–±–æ—Ä–∫–∞":
        await bot.send_message(
            GROUP_ID,
            f"üì¢ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ —Å–±–æ—Ä–∫—É!\n"
            f"üîπ {user_data['project_type']} | {user_data['category']}\n"
            f"üîπ –ù–∞–∑–≤–∞–Ω–∏–µ: {user_data['name']}\n"
            f"üîπ –í–µ—Ä—Å–∏—è: {user_data['version']}\n"
            f"üîπ –°–æ—Ü.—Å–µ—Ç–∏: {user_data['socials']}\n"
            f"üîπ –ö–∞—Å—Ç–æ–º–Ω—ã–π —Å–ø–∞–≤–Ω: {user_data['spawn']}\n"
            f"üîπ –°—Ä–æ–∫: {user_data['deadline']}\n"
            f"–ó–∞–∫–∞–∑—á–∏–∫: {message.from_user.full_name} (@{message.from_user.username or '–ë–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞'})"
        )
        await message.answer("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —Å–±–æ—Ä–∫—É –ø—Ä–∏–Ω—è—Ç!", reply_markup=main_menu)

    await state.clear()
