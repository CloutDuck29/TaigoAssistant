from aiogram import types, Router
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from bot.keyboards import minecraft_menu, yes_no_menu, main_menu, how_do_you_know_us, deadline
from bot.states import OrderState
from bot.loader import bot
from bot.config import GROUP_ID

router = Router()

order_launcher_steps = {
    'name': {"question": "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Å–∏—é –ª–∞—É–Ω—á–µ—Ä–∞", "next_state": OrderState.waiting_for_versionLauncher},
    'version': {"question": "–£–∫–∞–∂–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ª–∞—É–Ω—á–µ—Ä–∞ –∏ –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –æ–Ω –¥–æ–ª–∂–µ–Ω —Ä–µ—à–∞—Ç—å",
                "next_state": OrderState.waiting_for_funcLauncher},
    'func': {"question": "–£–∫–∞–∂–∏—Ç–µ, –µ—Å—Ç—å –ª–∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –ª–∞—É–Ω—á–µ—Ä (–±–∏–±–ª–∏–æ—Ç–µ–∫–∏, –∫–∞–∫–∏–µ-—Ç–æ —Å–º–µ–∂–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã)",
             "next_state": OrderState.waiting_for_addonsLauncher},
    'addons': {"question": "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –ª–∞—É–Ω—á–µ—Ä–æ–≤ –Ω–∞–ø–æ–¥–æ–±–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º—ã –º–æ–≥–ª–∏ –±—ã –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)",
               "next_state": OrderState.waiting_for_examplesLauncher},
    'examples': {"question": "–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ, —á—Ç–æ –±—ã–ª–æ —É–ø—É—â–µ–Ω–æ –≤ –Ω–∞—à–µ–π —Ñ–æ—Ä–º–µ –Ω–∞ –í–∞—à –≤–∑–≥–ª—è–¥, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –í–∞—à–µ–º—É –ø—Ä–æ–µ–∫—Ç—É",
                 "next_state": OrderState.waiting_for_designLauncher},
    'extra': {"question": "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–∏–∑–∞–π–Ω (–µ—Å–ª–∏ –∏–º–µ–µ—Ç—Å—è) –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –¥–∏–∑–∞–π–Ω –Ω—É–∂–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å",
              "next_state": OrderState.waiting_for_extraInfoLauncher},
    'design': {"question": "–ï—Å—Ç—å –ª–∏ —É –í–∞—Å –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –ø–æ–≤–æ–¥—É —Å—Ä–æ–∫–æ–≤?", "next_state": OrderState.waiting_for_deadlineLauncher,
               "keyboard": deadline},
    'dead': {"question": "–û—Ç–∫—É–¥–∞ –í—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏?", "next_state": OrderState.waiting_for_sourceLauncher,
             "keyboard": how_do_you_know_us},
    'source': {"question": None, "next_state": None}
}


async def process_order_launcher_step(message: types.Message, state: FSMContext, field: str):
    await state.update_data({field: message.text})

    step_info = order_launcher_steps[field]
    if step_info["question"]:
        await message.answer(step_info["question"], reply_markup=step_info.get("keyboard", ReplyKeyboardRemove()))

    if step_info["next_state"]:
        await state.set_state(step_info["next_state"])
    else:
        await complete_launcher_order(message, state)


async def complete_launcher_order(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –ª–∞—É–Ω—á–µ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≥—Ä—É–ø–ø—É."""
    user_data = await state.get_data()
    await bot.send_message(
        GROUP_ID,
        f"üì¢ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –ª–∞—É–Ω—á–µ—Ä!\n\n"
        f"‚ô¶Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ:\n ‚Äî {user_data['name']}\n"
        f"‚ô¶Ô∏è –í–µ—Ä—Å–∏—è:\n ‚Äî {user_data['version']}\n"
        f"‚ô¶Ô∏è –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ª–∞—É–Ω—á–µ—Ä–∞:\n ‚Äî {user_data['func']}\n"
        f"‚ô¶Ô∏è –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã:\n ‚Äî {user_data['addons']}\n"
        f"‚ô¶Ô∏è –ü—Ä–∏–º–µ—Ä—ã:\n ‚Äî {user_data['examples']}\n"
        f"‚ô¶Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n ‚Äî {user_data['extra']}\n"
        f"‚ô¶Ô∏è –î–∏–∑–∞–π–Ω:\n ‚Äî {user_data['design']}\n"
        f"‚ô¶Ô∏è –°—Ä–æ–∫–∏:\n ‚Äî {user_data['dead']}\n"
        f"‚ô¶Ô∏è –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å:\n ‚Äî {user_data['source']}\n\n"
        f"–ó–∞–∫–∞–∑—á–∏–∫: {message.from_user.full_name} (@{message.from_user.username or '–ë–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞'})"
    )
    await message.answer("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ –ª–∞—É–Ω—á–µ—Ä –ø—Ä–∏–Ω—è—Ç!", reply_markup=main_menu)
    await state.clear()


@router.message(OrderState.waiting_for_nameLauncher)
async def process_name_launcher(message: types.Message, state: FSMContext):
    await process_order_launcher_step(message, state, 'name')


@router.message(OrderState.waiting_for_versionLauncher)
async def process_version_launcher(message: types.Message, state: FSMContext):
    await process_order_launcher_step(message, state, 'version')


@router.message(OrderState.waiting_for_funcLauncher)
async def process_func_launcher(message: types.Message, state: FSMContext):
    await process_order_launcher_step(message, state, 'func')


@router.message(OrderState.waiting_for_addonsLauncher)
async def process_addons_launcher(message: types.Message, state: FSMContext):
    await process_order_launcher_step(message, state, 'addons')


@router.message(OrderState.waiting_for_examplesLauncher)
async def process_examples_launcher(message: types.Message, state: FSMContext):
    await process_order_launcher_step(message, state, 'examples')


@router.message(OrderState.waiting_for_designLauncher)
async def process_design_launcher(message: types.Message, state: FSMContext):
    await process_order_launcher_step(message, state, 'extra')


@router.message(OrderState.waiting_for_extraInfoLauncher)
async def process_extra_launcher(message: types.Message, state: FSMContext):
    await process_order_launcher_step(message, state, 'design')


@router.message(OrderState.waiting_for_deadlineLauncher)
async def process_deadline_launcher(message: types.Message, state: FSMContext):
    await process_order_launcher_step(message, state, 'dead')


@router.message(OrderState.waiting_for_sourceLauncher)
async def process_source_launcher(message: types.Message, state: FSMContext):
    await process_order_launcher_step(message, state, 'source')
