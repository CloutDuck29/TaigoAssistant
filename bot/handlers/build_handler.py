from aiogram import types, Router
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from bot.keyboards import minecraft_menu, yes_no_menu, main_menu, how_do_you_know_us, deadline
from bot.states import OrderState
from bot.loader import bot
from bot.config import GROUP_ID

router = Router()

@router.message(OrderState.waiting_for_typeBuild)
async def process_type_build(message: types.Message, state: FSMContext):
    await state.update_data(type=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ç—Ä–æ–∏—Ç—å")
    await state.set_state(OrderState.waiting_for_versionBuild)

@router.message(OrderState.waiting_for_versionBuild)
async def process_version(message: types.Message, state: FSMContext):
    await state.update_data(version=message.text)
    await message.answer("–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –≤ –ø–æ—Å—Ç—Ä–æ–π–∫–µ")
    await state.set_state(OrderState.waiting_for_whatToBuild)

@router.message(OrderState.waiting_for_whatToBuild)
async def process_whattobuild(message: types.Message, state: FSMContext):
    await state.update_data(build=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å –ø–æ—Å—Ç—Ä–æ–π–∫–∏ (—Ö–∞–π-—Ç–µ–∫, –º–æ–¥–µ—Ä–Ω, –∏ —Ç.–¥)")
    await state.set_state(OrderState.waiting_for_styleOfBuild)

@router.message(OrderState.waiting_for_styleOfBuild)
async def process_style(message: types.Message, state: FSMContext):
    await state.update_data(style=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –í–∞—à–µ–π –ø–æ—Å—Ç—Ä–æ–π–∫–∏ (–≤ –±–ª–æ–∫–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä 150—Ö150)")
    await state.set_state(OrderState.waiting_for_sizeOfBuild)


@router.message(OrderState.waiting_for_sizeOfBuild)
async def process_size(message: types.Message, state: FSMContext):
    await state.update_data(size=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–∏–∑–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, –≤—ã—Å–æ–∫–∏–π)")
    await state.set_state(OrderState.waiting_for_detalizationOfBuild)

@router.message(OrderState.waiting_for_detalizationOfBuild)
async def process_detalization(message: types.Message, state: FSMContext):
    await state.update_data(detalization=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å–µ–∑–æ–Ω –ø–æ—Å—Ç—Ä–æ–π–∫–∏ (–µ—Å–ª–∏ –æ–Ω –∏–º–µ–µ—Ç –º–µ—Å—Ç–æ –±—ã—Ç—å)")
    await state.set_state(OrderState.waiting_for_sezonOfBuild)

@router.message(OrderState.waiting_for_sezonOfBuild)
async def process_sezon(message: types.Message, state: FSMContext):
    await state.update_data(sezon=message.text)
    await message.answer("–ù—É–∂–Ω–æ –ª–∏ —Ä–∞—Å—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ—á–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π (—É–∫–∞–∂–∏—Ç–µ, –≥–¥–µ –∏ —Å–∫–æ–ª—å–∫–æ)")
    await state.set_state(OrderState.waiting_for_pointsOfBuild)


@router.message(OrderState.waiting_for_pointsOfBuild)
async def process_points(message: types.Message, state: FSMContext):
    await state.update_data(points=message.text)
    await message.answer("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–æ–¥–æ–±–∏–µ, –∫–∞–∫ –ø—Ä–∏–º–µ—Ä—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º—ã –º–æ–≥–ª–∏ –±—ã –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è")
    await state.set_state(OrderState.waiting_for_picturesOfBuild)

@router.message(OrderState.waiting_for_picturesOfBuild)
async def process_pictures(message: types.Message, state: FSMContext):
    await state.update_data(pictures=message.text)
    await message.answer("–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ, —á—Ç–æ –±—ã–ª–æ —É–ø—É—â–µ–Ω–æ –≤ –Ω–∞—à–µ–π —Ñ–æ—Ä–º–µ –Ω–∞ –í–∞—à –≤–∑–≥–ª—è–¥, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –í–∞—à–µ–º—É –ø—Ä–æ–µ–∫—Ç—É")
    await state.set_state(OrderState.waiting_for_extraInfoBuild)

@router.message(OrderState.waiting_for_extraInfoBuild)
async def process_extra(message: types.Message, state: FSMContext):
    await state.update_data(extra=message.text)
    await message.answer("–ï—Å—Ç—å –ª–∏ —É –í–∞—Å –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –ø–æ–≤–æ–¥—É —Å—Ä–æ–∫–æ–≤?", reply_markup=deadline)
    await state.set_state(OrderState.waiting_for_deadlineBuild)

@router.message(OrderState.waiting_for_deadlineBuild)
async def process_deadline(message: types.Message, state: FSMContext):
    await state.update_data(deadline=message.text)
    await message.answer("–û—Ç–∫—É–¥–∞ –í—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?", reply_markup= how_do_you_know_us)
    await state.set_state(OrderState.waiting_for_sourceBuild)

@router.message(OrderState.waiting_for_sourceBuild)
async def process_source_build(message: types.Message, state: FSMContext):
    await state.update_data(source=message.text)

    user_data = await state.get_data()

    await bot.send_message(
        GROUP_ID,
        f"üì¢ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫—É!\n\n"
        f"üîπ –¢–∏–ø –ø–æ—Å—Ç—Ä–æ–π–∫–∏:\n ‚Äî {user_data['type']}\n"
        f"üîπ –í–µ—Ä—Å–∏—è:\n ‚Äî {user_data['version']}\n"
        f"üîπ –ß—Ç–æ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å:\n ‚Äî {user_data['build']}\n"
        f"üîπ –°—Ç–∏–ª—å –ø–æ—Å—Ç—Ä–æ–π–∫–∏:\n ‚Äî {user_data['style']}\n"
        f"üîπ –†–∞–∑–º–µ—Ä –ø–æ—Å—Ç—Ä–æ–π–∫–∏:\n ‚Äî {user_data['size']}\n"
        f"üîπ –£—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏:\n ‚Äî {user_data['detalization']}\n"
        f"üîπ –°–µ–∑–æ–Ω –ø–æ—Å—Ç—Ä–æ–π–∫–∏:\n ‚Äî {user_data['sezon']}\n"
        f"üîπ –¢–æ—á–∫–∏ –ª–æ–∫–∞—Ü–∏–π:\n ‚Äî {user_data['points']}\n"
        f"üîπ –ü—Ä–∏–º–µ—Ä—ã:\n ‚Äî {user_data['pictures']}\n"
        f"üîπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n ‚Äî {user_data['extra']}\n"
        f"üîπ –°—Ä–æ–∫–∏:\n ‚Äî {user_data['deadline']}\n"
        f"üîπ –û—Ç–∫—É–¥–∞ –í—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å:\n ‚Äî {user_data['source']}\n"

        f"–ó–∞–∫–∞–∑—á–∏–∫: {message.from_user.full_name} (@{message.from_user.username or '–ë–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞'})"
    )
    await message.answer("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫—É –ø—Ä–∏–Ω—è—Ç!", reply_markup=main_menu)

    await state.clear()
