from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from bot.keyboards import minecraft_menu, yes_no_menu, main_menu, how_do_you_know_us, deadline
from bot.states import OrderState
from bot.loader import bot
from aiogram.types import ReplyKeyboardRemove
from bot.config import GROUP_ID
from aiogram.filters import Command


router = Router()

order_steps = {
    'type': {"question": "–£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ç—Ä–æ–∏—Ç—å",
             "next_state": OrderState.waiting_for_versionBuild},
    'version': {"question": "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –≤ –ø–æ—Å—Ç—Ä–æ–π–∫–µ",
                "next_state": OrderState.waiting_for_whatToBuild},
    'build': {"question": "–£–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å –ø–æ—Å—Ç—Ä–æ–π–∫–∏ (—Ö–∞–π-—Ç–µ–∫, –º–æ–¥–µ—Ä–Ω, –∏ —Ç.–¥)",
              "next_state": OrderState.waiting_for_styleOfBuild},
    'style': {"question": "–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –í–∞—à–µ–π –ø–æ—Å—Ç—Ä–æ–π–∫–∏ (–≤ –±–ª–æ–∫–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä 150—Ö150)",
              "next_state": OrderState.waiting_for_sizeOfBuild},
    'size': {"question": "–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–∏–∑–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, –≤—ã—Å–æ–∫–∏–π)",
             "next_state": OrderState.waiting_for_detalizationOfBuild},
    'detalization': {"question": "–£–∫–∞–∂–∏—Ç–µ —Å–µ–∑–æ–Ω –ø–æ—Å—Ç—Ä–æ–π–∫–∏ (–µ—Å–ª–∏ –æ–Ω –∏–º–µ–µ—Ç –º–µ—Å—Ç–æ –±—ã—Ç—å)",
                     "next_state": OrderState.waiting_for_sezonOfBuild},
    'sezon': {"question": "–ù—É–∂–Ω–æ –ª–∏ —Ä–∞—Å—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ—á–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π (—É–∫–∞–∂–∏—Ç–µ, –≥–¥–µ –∏ —Å–∫–æ–ª—å–∫–æ)",
              "next_state": OrderState.waiting_for_pointsOfBuild},
    'points': {
        "question": "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–æ–¥–æ–±–∏–µ, –∫–∞–∫ –ø—Ä–∏–º–µ—Ä—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º—ã –º–æ–≥–ª–∏ –±—ã –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è",
        "next_state": OrderState.waiting_for_picturesOfBuild},
    'pictures': {
        "question": "–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ, —á—Ç–æ –±—ã–ª–æ —É–ø—É—â–µ–Ω–æ –≤ –Ω–∞—à–µ–π —Ñ–æ—Ä–º–µ –Ω–∞ –í–∞—à –≤–∑–≥–ª—è–¥, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –í–∞—à–µ–º—É –ø—Ä–æ–µ–∫—Ç—É",
        "next_state": OrderState.waiting_for_extraInfoBuild},
    'extra': {"question": "–ï—Å—Ç—å –ª–∏ —É –í–∞—Å –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –ø–æ–≤–æ–¥—É —Å—Ä–æ–∫–æ–≤?",
              "next_state": OrderState.waiting_for_deadlineBuild, "keyboard": deadline},
    'deadline': {"question": "–û—Ç–∫—É–¥–∞ –í—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?", "next_state": OrderState.waiting_for_sourceBuild,
                 "keyboard": how_do_you_know_us},
    'source': {"question": None, "next_state": None}
}


async def process_order_step(message: types.Message, state: FSMContext, field: str):
    await state.update_data({field: message.text})

    step_info = order_steps[field]

    if step_info["question"]:
        text = step_info["question"]

        if field == "type":
            text += "\n\n‚ùó –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚Äî –≤–≤–µ–¥–∏—Ç–µ /cancel"

        await message.answer(text, reply_markup=step_info.get("keyboard", ReplyKeyboardRemove()))

    if step_info["next_state"]:
        await state.set_state(step_info["next_state"])
    else:
        await complete_order(message, state)


async def complete_order(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await bot.send_message(
        GROUP_ID,
        f"üì¢ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫—É!\n\n"
        f"üîπ –¢–∏–ø –ø–æ—Å—Ç—Ä–æ–π–∫–∏:\n ‚Äî {user_data['type']}\n"
        f"üîπ –í–µ—Ä—Å–∏—è:\n ‚Äî {user_data['version']}\n"
        f"üîπ –ß—Ç–æ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å:\n ‚Äî {user_data['build']}\n"
        f"üîπ –°—Ç–∏–ª—å –ø–æ—Å—Ç—Ä–æ–π–∫–∏:\n ‚Äî {user_data['style']}\n"
        f"üîπ –†–∞–∑–º–µ—Ä –ø–æ—Å—Ç—Ä–æ–π–∫–∏:\n ‚Äî {user_data['size']}\n"
        f"üîπ –£—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏:\n ‚Äî {user_data['detalization']}\n"
        f"üîπ –°–µ–∑–æ–Ω –ø–æ—Å—Ç—Ä–æ–π–∫–∏:\n ‚Äî {user_data['sezon']}\n"
        f"üîπ –¢–æ—á–∫–∏ –ª–æ–∫–∞—Ü–∏–π:\n ‚Äî {user_data['points']}\n"
        f"üîπ –ü—Ä–∏–º–µ—Ä—ã:\n ‚Äî {user_data['pictures']}\n"
        f"üîπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n ‚Äî {user_data['extra']}\n"
        f"üîπ –°—Ä–æ–∫–∏:\n ‚Äî {user_data['deadline']}\n"
        f"üîπ –û—Ç–∫—É–¥–∞ –í—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å:\n ‚Äî {user_data['source']}\n\n"
        f"–ó–∞–∫–∞–∑—á–∏–∫: {message.from_user.full_name} (@{message.from_user.username or '–ë–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞'})"
    )
    await message.answer("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫—É –ø—Ä–∏–Ω—è—Ç!", reply_markup=main_menu)
    await state.clear()

@router.message(Command("cancel"))
async def cancel_order_command(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üö´ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)


@router.message(OrderState.waiting_for_typeBuild)
async def process_type_build(message: types.Message, state: FSMContext):
    await process_order_step(message, state, 'type')


@router.message(OrderState.waiting_for_versionBuild)
async def process_version(message: types.Message, state: FSMContext):
    await process_order_step(message, state, 'version')


@router.message(OrderState.waiting_for_whatToBuild)
async def process_whattobuild(message: types.Message, state: FSMContext):
    await process_order_step(message, state, 'build')


@router.message(OrderState.waiting_for_styleOfBuild)
async def process_style(message: types.Message, state: FSMContext):
    await process_order_step(message, state, 'style')


@router.message(OrderState.waiting_for_sizeOfBuild)
async def process_size(message: types.Message, state: FSMContext):
    await process_order_step(message, state, 'size')


@router.message(OrderState.waiting_for_detalizationOfBuild)
async def process_detalization(message: types.Message, state: FSMContext):
    await process_order_step(message, state, 'detalization')


@router.message(OrderState.waiting_for_sezonOfBuild)
async def process_sezon(message: types.Message, state: FSMContext):
    await process_order_step(message, state, 'sezon')


@router.message(OrderState.waiting_for_pointsOfBuild)
async def process_points(message: types.Message, state: FSMContext):
    await process_order_step(message, state, 'points')


@router.message(OrderState.waiting_for_picturesOfBuild)
async def process_pictures(message: types.Message, state: FSMContext):
    await process_order_step(message, state, 'pictures')


@router.message(OrderState.waiting_for_extraInfoBuild)
async def process_extra(message: types.Message, state: FSMContext):
    await process_order_step(message, state, 'extra')


@router.message(OrderState.waiting_for_deadlineBuild)
async def process_deadline(message: types.Message, state: FSMContext):
    await process_order_step(message, state, 'deadline')


@router.message(OrderState.waiting_for_sourceBuild)
async def process_source_build(message: types.Message, state: FSMContext):
    await process_order_step(message, state, 'source')





