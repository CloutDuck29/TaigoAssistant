from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from bot.keyboards import project_type_menu, minecraft_menu, software_menu, main_menu
from bot.states import OrderState
from bot.loader import bot
from bot.config import GROUP_ID

router = Router()

@router.message(lambda message: message.text == "üìù –ó–∞–∫–∞–∑–∞—Ç—å")
async def order_button(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:", reply_markup=project_type_menu)
    await state.set_state(OrderState.waiting_for_project_type)

@router.message(OrderState.waiting_for_project_type)
async def process_project_type(message: types.Message, state: FSMContext):
    if message.text == "üü¢ Minecraft":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=minecraft_menu)
        await state.update_data(project_type="Minecraft")
        await state.set_state(OrderState.waiting_for_category)
    elif message.text == "üîµ –ü–û":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=software_menu)
        await state.update_data(project_type="–ü–û")
        await state.set_state(OrderState.waiting_for_po)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç–∏–ø–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞.", reply_markup=project_type_menu)

@router.message(OrderState.waiting_for_category)
async def process_build_category(message: types.Message, state: FSMContext):
    category = message.text
    if category == "–°–±–æ—Ä–∫–∞":
        await message.answer("üìã –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", reply_markup=ReplyKeyboardRemove())
        await state.update_data(category=category)
        await state.set_state(OrderState.waiting_for_name)

    elif category == "–ü–ª–∞–≥–∏–Ω":
        await message.answer("üìã –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞", reply_markup=ReplyKeyboardRemove())
        await state.update_data(category=category)
        await state.set_state(OrderState.waiting_for_namePlugin)

    elif category == "–õ–∞—É–Ω—á–µ—Ä":
        await message.answer("üìã –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∞—É–Ω—á–µ—Ä–∞", reply_markup=ReplyKeyboardRemove())
        await state.update_data(category=category)
        await state.set_state(OrderState.waiting_for_nameLauncher)

    elif category == "–ü–æ—Å—Ç—Ä–æ–π–∫–∞":
        await message.answer("üìã –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–π —Ç–∏–ø –ø–æ—Å—Ç—Ä–æ–π–∫–∏", reply_markup=ReplyKeyboardRemove())
        await state.update_data(category=category)
        await state.set_state(OrderState.waiting_for_typeBuild)

    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.", reply_markup=minecraft_menu)


@router.message(OrderState.waiting_for_po)
async def process_po_category(message: types.Message, state: FSMContext):
    category = message.text
    if category == "–°–∞–π—Ç":
        await message.answer("üìã –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞", reply_markup=ReplyKeyboardRemove())
        await state.update_data(category=category)
        await state.set_state(OrderState.waiting_for_nameSite)

    elif category == "–ò–≥—Ä–∞":
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @taigo_official", reply_markup=ReplyKeyboardRemove())

    elif category == "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ":
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @taigo_official", reply_markup=ReplyKeyboardRemove())

    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.", reply_markup=software_menu)
