from aiogram import types, Router
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from bot.keyboards import minecraft_menu, yes_no_menu, main_menu, how_do_you_know_us, deadline
from bot.states import OrderState
from bot.loader import bot
from bot.config import GROUP_ID
from aiogram.filters import Command

router = Router()

order_build_steps = {
    'name': {"question": "–í–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥)?", "next_state": OrderState.waiting_for_birthdatePlugin},
    'birthdate': {"question": "–í–∞—à –æ–ø—ã—Ç –≤ –≥–æ–¥–∞—Ö", "next_state": OrderState.waiting_for_experienceInYearsInPlugins},
    'experience': {"question": "1Ô∏è‚É£ –ö–∞–∫–æ–π —É –í–∞—Å –æ–ø—ã—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞–≥–∏–Ω–æ–≤ –¥–ª—è Minecraft? C –∫–∞–∫–∏–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏ (Bukkit, Spigot, Paper) –í—ã —Ä–∞–±–æ—Ç–∞–ª–∏?", "next_state": OrderState.waiting_for_experiencePlugin},
    'plugin_experience': {"question": "2Ô∏è‚É£ –ö–∞–∫–æ–π –í–∞—à —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º Java/Kotlin? –†–∞–±–æ—Ç–∞–ª–∏ –ª–∏ –í—ã —Å –¥—Ä—É–≥–∏–º–∏ —è–∑—ã–∫–∞–º–∏ –∏–ª–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –ø–ª–∞–≥–∏–Ω–æ–≤?", "next_state": OrderState.waiting_for_languagePlugin},
    'language_experience': {"question": "3Ô∏è‚É£ –ú–æ–∂–µ—Ç–µ –ª–∏ –í—ã –ø—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä –ø–ª–∞–≥–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏? –ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç, –∏ –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Ä–µ—à–∞–µ—Ç?", "next_state": OrderState.waiting_for_exampleOfPlugin},
    'plugin_example': {"question": "4Ô∏è‚É£ –ö–∞–∫ –í—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–≥–∏–Ω–æ–≤ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤ Minecraft? –ö–∞–∫–∏–µ —à–∞–≥–∏ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∞–≥–æ–≤ –∏ —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å?", "next_state": OrderState.waiting_for_optimizationOfPlugin},
    'optimization_plugin': {"question": "5Ô∏è‚É£ –ï—Å—Ç—å –ª–∏ —É –í–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–ª–∞–≥–∏–Ω–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, MySQL –∏–ª–∏ SQLite)?", "next_state": OrderState.waiting_for_databaseOfPlugin},
    'database_experience': {"question": "6Ô∏è‚É£ –ö–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞–≥–∏–Ω–æ–≤? –ö–∞–∫ –í—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å –æ—Ç–ª–∞–¥–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –±–∞–≥–æ–≤?", "next_state": OrderState.waiting_for_testsOfPlugin},
    'tests_plugin': {"question": "7Ô∏è‚É£ –ö–∞–∫ –í—ã —Ä–µ—à–∞–µ—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–ª–∞–≥–∏–Ω–æ–≤ —Å –¥—Ä—É–≥–∏–º–∏ –ø–ª–∞–≥–∏–Ω–∞–º–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ?", "next_state": OrderState.waiting_for_compsOfPlugin},
    'comp_plugin': {"question": "8Ô∏è‚É£ –ö–∞–∫ –í—ã –æ–±—ã—á–Ω–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä—É–µ—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø–ª–∞–≥–∏–Ω–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, YAML –∏–ª–∏ JSON)? –ö–∞–∫ –í—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç–µ –∏—Ö –≥–∏–±–∫–æ—Å—Ç—å –∏ —É–¥–æ–±—Å—Ç–≤–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å–µ—Ä–≤–µ—Ä–æ–≤?", "next_state": OrderState.waiting_for_configOfPlugin},
    'config_plugin': {"question": "9Ô∏è‚É£ –ö–∞–∫ –í—ã —Ä–µ–∞–ª–∏–∑—É–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–ª–∞–≥–∏–Ω–æ–≤ —Å –∏–≥—Ä–æ–∫–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã, GUI –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?", "next_state": OrderState.waiting_for_guiOfPlugin},
    'gui_plugin': {"question": "9Ô∏è‚É£ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –í–∞—à–∏—Ö —Ä–∞–±–æ—Ç (—Å—Å—ã–ª–∫–∞ Github, behance, imgur –∏ –¥—Ä)","next_state": OrderState.waiting_for_portfolioPluginNew},
    'portfolio': {"question": None, "next_state": None}
}


async def process_order_build_step(message: types.Message, state: FSMContext, field: str):
    if message.text.lower() == "/cancel":
        await state.clear()
        await message.answer("üö´ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
        return

    await state.update_data({field: message.text})

    step_info = order_build_steps[field]
    if step_info["question"]:
        text = step_info["question"]

        if field == "name":
            text += "\n\n‚ùó –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ ‚Äî –≤–≤–µ–¥–∏—Ç–µ /cancel"

        await message.answer(text, reply_markup=step_info.get("keyboard", ReplyKeyboardRemove()))

    if step_info["next_state"]:
        await state.set_state(step_info["next_state"])
    else:
        await complete_plugin_form(message, state)

async def complete_plugin_form(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await bot.send_message(
        GROUP_ID,
        f"üì¢ –ù–æ–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤!\n\n"
        f"üîπ –§–ò–û:\n ‚Äî {user_data['name']}\n"
        f"üîπ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:\n ‚Äî {user_data['birthdate']}\n"
        f"üîπ –û–ø—ã—Ç –≤ –≥–æ–¥–∞—Ö:\n ‚Äî {user_data['experience']}\n"
        f"üîπ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–≥–∏–Ω–∞–º–∏:\n ‚Äî {user_data['plugin_experience']}\n"
        f"üîπ –û–ø—ã—Ç –≤ —è–∑—ã–∫–∞—Ö:\n ‚Äî {user_data['language_experience']}\n"
        f"üîπ –ü—Ä–∏–º–µ—Ä –ø–ª–∞–≥–∏–Ω–∞:\n ‚Äî {user_data['plugin_example']}\n"
        f"üîπ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞:\n ‚Äî {user_data['optimization_plugin']}\n"
        f"üîπ –û–ø—ã—Ç –≤ –ë–î:\n ‚Äî {user_data['database_experience']}\n"
        f"üîπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞:\n ‚Äî {user_data['tests_plugin']}\n"
        f"üîπ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:\n ‚Äî {user_data['comp_plugin']}\n"
        f"üîπ –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥–∞–º–∏:\n ‚Äî {user_data['config_plugin']}\n"
        f"üîπ –†–∞–±–æ—Ç–∞ —Å GUI:\n ‚Äî {user_data['gui_plugin']}\n"       
        f"üîπ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ:\n ‚Äî {user_data['portfolio']}\n\n"       
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {message.from_user.full_name} (@{message.from_user.username or '–ë–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞'})"
    )
    await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏!", reply_markup=main_menu)
    await state.clear()

@router.message(OrderState.waiting_for_fioPlugin)
async def process_fio(message: types.Message, state: FSMContext):
    await process_order_build_step(message, state, 'name')

@router.message(OrderState.waiting_for_birthdatePlugin)
async def process_birthdate(message: types.Message, state: FSMContext):
    await process_order_build_step(message, state, 'birthdate')

@router.message(OrderState.waiting_for_experienceInYearsInPlugins)
async def process_experience_inyears(message: types.Message, state: FSMContext):
    await process_order_build_step(message, state, 'experience')

@router.message(OrderState.waiting_for_experiencePlugin)
async def process_plugin_experiencefact(message: types.Message, state: FSMContext):
    await process_order_build_step(message, state, 'plugin_experience')

@router.message(OrderState.waiting_for_languagePlugin)
async def process_language_exp(message: types.Message, state: FSMContext):
    await process_order_build_step(message, state, 'language_experience')

@router.message(OrderState.waiting_for_exampleOfPlugin)
async def process_examp_plug(message: types.Message, state: FSMContext):
    await process_order_build_step(message, state, 'plugin_example')

@router.message(OrderState.waiting_for_optimizationOfPlugin)
async def process_optimization_plug(message: types.Message, state: FSMContext):
    await process_order_build_step(message, state, 'optimization_plugin')

@router.message(OrderState.waiting_for_databaseOfPlugin)
async def process_data_plug(message: types.Message, state: FSMContext):
    await process_order_build_step(message, state, 'database_experience')

@router.message(OrderState.waiting_for_testsOfPlugin)
async def process_test_plug(message: types.Message, state: FSMContext):
    await process_order_build_step(message, state, 'tests_plugin')

@router.message(OrderState.waiting_for_compsOfPlugin)
async def process_comp_plug(message: types.Message, state: FSMContext):
    await process_order_build_step(message, state, 'comp_plugin')

@router.message(OrderState.waiting_for_configOfPlugin)
async def process_config_plugin(message: types.Message, state: FSMContext):
    await process_order_build_step(message, state, 'config_plugin')

@router.message(OrderState.waiting_for_guiOfPlugin)
async def process_gui_plugin(message: types.Message, state: FSMContext):
    await process_order_build_step(message, state, 'gui_plugin')

@router.message(OrderState.waiting_for_portfolioPluginNew)
async def process_gui_plugin(message: types.Message, state: FSMContext):
    await process_order_build_step(message, state, 'portfolio')
